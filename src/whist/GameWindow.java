/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package whist;


import java.awt.Component;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
/**
 *
 * @author james
 */
public class GameWindow extends javax.swing.JFrame{
    
    final String[] buttons = new String[]{"card00","card01","card02","card03","card04","card05","card06"};
    String player1,player2,player3,player4,player5,trumpinfo,winnername;//userTrump for players choice of trump
    String[] playernames = new String[]{null,null,null,null,null};
    int[] score;
    String[] tricks;
    int count=0,shuffles, round=0,choice, playerTurn=0,firstcardplayer,prev_round_winner, cardsLain;
    int[] p1Used = new int[]{0,0,0,0,0,0,0};
    int[] p2Used = new int[]{0,0,0,0,0,0,0};
    int[] p3Used = new int[]{0,0,0,0,0,0,0};
    int[] p4Used = new int[]{0,0,0,0,0,0,0};
    int[] p5Used = new int[]{0,0,0,0,0,0,0};
    Boolean p1edit,p2edit,p3edit,p4edit,p5edit, gameover;
    int playerNameEnter;
    Dealing dealing = new Dealing();
    JLabel picLabel = new JLabel();
    JLabel trickLabel= new JLabel();
    int numberOfCards,numberOfPlayers;
    URL resource = GameWindow.class.getResource("/images/icons8-cards-32.png");
    //BufferedImage myPicture = ImageIO.read(resource);
    ImageIcon imgicon = new ImageIcon(resource);
    /**
     * Creates new form GameWindow
     */
    public GameWindow() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GameOverScreen = new javax.swing.JPanel();
        gameoverLabel = new javax.swing.JLabel();
        winnerLabel = new javax.swing.JLabel();
        playAgain = new javax.swing.JButton();
        GObackground = new javax.swing.JLabel();
        pickTrump = new javax.swing.JPanel();
        lastWinnerPickMessage = new javax.swing.JLabel();
        spades = new javax.swing.JButton();
        hearts = new javax.swing.JButton();
        clubs = new javax.swing.JButton();
        diamonds = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deckForTPick = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        shufflePanel = new javax.swing.JPanel();
        riffle = new javax.swing.JButton();
        overhand = new javax.swing.JButton();
        deal = new javax.swing.JButton();
        gamesetup = new javax.swing.JPanel();
        p1 = new javax.swing.JButton();
        p2 = new javax.swing.JButton();
        p3 = new javax.swing.JButton();
        p4 = new javax.swing.JButton();
        p5 = new javax.swing.JButton();
        playername = new javax.swing.JLabel();
        enterName = new javax.swing.JTextField();
        setName = new javax.swing.JButton();
        PlayerNames = new javax.swing.JLabel();
        continueMessage = new javax.swing.JLabel();
        Continue = new javax.swing.JButton();
        resetNames = new javax.swing.JButton();
        resetCards = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        trickArea = new javax.swing.JLayeredPane();
        deck = new javax.swing.JLayeredPane();
        card6 = new javax.swing.JButton();
        card5 = new javax.swing.JButton();
        card4 = new javax.swing.JButton();
        card3 = new javax.swing.JButton();
        card2 = new javax.swing.JButton();
        card1 = new javax.swing.JButton();
        card0 = new javax.swing.JButton();
        userMessage = new javax.swing.JLabel();
        userMessage3 = new javax.swing.JLabel();
        userMessage2 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Whist");
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(null
        );
        setIconImage(new ImageIcon(resource).getImage());
        setMinimumSize(new java.awt.Dimension(1630, 813));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        gameoverLabel.setFont(new java.awt.Font("Georgia", 1, 150)); // NOI18N
        gameoverLabel.setForeground(new java.awt.Color(0, 102, 204));
        gameoverLabel.setText("Game Over!");

        winnerLabel.setFont(new java.awt.Font("Georgia", 1, 70)); // NOI18N
        winnerLabel.setForeground(new java.awt.Color(0, 102, 204));
        winnerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        winnerLabel.setText("jLabel2");

        playAgain.setBackground(new java.awt.Color(51, 51, 51));
        playAgain.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        playAgain.setForeground(new java.awt.Color(255, 255, 255));
        playAgain.setText("Play Again");
        playAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainActionPerformed(evt);
            }
        });

        GObackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gameover.jpg"))); // NOI18N
        GObackground.setOpaque(true);

        javax.swing.GroupLayout GameOverScreenLayout = new javax.swing.GroupLayout(GameOverScreen);
        GameOverScreen.setLayout(GameOverScreenLayout);
        GameOverScreenLayout.setHorizontalGroup(
            GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameOverScreenLayout.createSequentialGroup()
                .addGroup(GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GameOverScreenLayout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(gameoverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 959, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GameOverScreenLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(winnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1359, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(217, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameOverScreenLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(playAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
            .addGroup(GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(GObackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        GameOverScreenLayout.setVerticalGroup(
            GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameOverScreenLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(gameoverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(winnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
            .addGroup(GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameOverScreenLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(GObackground)))
        );

        getContentPane().add(GameOverScreen);
        GameOverScreen.setBounds(0, -2, 1640, 780);

        lastWinnerPickMessage.setBackground(new java.awt.Color(0, 0, 0));
        lastWinnerPickMessage.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        lastWinnerPickMessage.setForeground(new java.awt.Color(51, 102, 255));
        lastWinnerPickMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lastWinnerPickMessage.setText("x");

        spades.setBackground(new java.awt.Color(51, 51, 51));
        spades.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        spades.setForeground(new java.awt.Color(255, 255, 255));
        spades.setText("Spades");
        spades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spadesActionPerformed(evt);
            }
        });

        hearts.setBackground(new java.awt.Color(51, 51, 51));
        hearts.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        hearts.setForeground(new java.awt.Color(255, 255, 255));
        hearts.setText("Hearts");
        hearts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartsActionPerformed(evt);
            }
        });

        clubs.setBackground(new java.awt.Color(51, 51, 51));
        clubs.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        clubs.setForeground(new java.awt.Color(255, 255, 255));
        clubs.setText("Clubs");
        clubs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clubsActionPerformed(evt);
            }
        });

        diamonds.setBackground(new java.awt.Color(51, 51, 51));
        diamonds.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        diamonds.setForeground(new java.awt.Color(255, 255, 255));
        diamonds.setText("Diamonds");
        diamonds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diamondsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setText("This is your hand for the next round");

        deckForTPick.setOpaque(false);

        javax.swing.GroupLayout deckForTPickLayout = new javax.swing.GroupLayout(deckForTPick);
        deckForTPick.setLayout(deckForTPickLayout);
        deckForTPickLayout.setHorizontalGroup(
            deckForTPickLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        deckForTPickLayout.setVerticalGroup(
            deckForTPickLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/poker-table-background-green-color_47243-1068.jpg"))); // NOI18N

        javax.swing.GroupLayout pickTrumpLayout = new javax.swing.GroupLayout(pickTrump);
        pickTrump.setLayout(pickTrumpLayout);
        pickTrumpLayout.setHorizontalGroup(
            pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pickTrumpLayout.createSequentialGroup()
                .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pickTrumpLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(pickTrumpLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastWinnerPickMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pickTrumpLayout.createSequentialGroup()
                                .addComponent(deckForTPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(spades, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(clubs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(63, 63, 63)
                                .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(diamonds, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(hearts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
            .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pickTrumpLayout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pickTrumpLayout.setVerticalGroup(
            pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pickTrumpLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lastWinnerPickMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pickTrumpLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spades, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hearts, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clubs, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diamonds, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pickTrumpLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deckForTPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pickTrumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pickTrumpLayout.createSequentialGroup()
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(pickTrump);
        pickTrump.setBounds(0, 0, 1630, 770);

        shufflePanel.setOpaque(false);

        riffle.setBackground(new java.awt.Color(51, 51, 51));
        riffle.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        riffle.setForeground(new java.awt.Color(255, 255, 255));
        riffle.setText("Riffle Shuffle");
        riffle.setMaximumSize(new java.awt.Dimension(156, 29));
        riffle.setMinimumSize(new java.awt.Dimension(156, 29));
        riffle.setPreferredSize(new java.awt.Dimension(156, 29));
        riffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                riffleActionPerformed(evt);
            }
        });

        overhand.setBackground(new java.awt.Color(51, 51, 51));
        overhand.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        overhand.setForeground(new java.awt.Color(255, 255, 255));
        overhand.setText("Overhand shuffle");
        overhand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overhandActionPerformed(evt);
            }
        });

        deal.setBackground(new java.awt.Color(51, 51, 51));
        deal.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        deal.setForeground(new java.awt.Color(255, 255, 255));
        deal.setText("Deal");
        deal.setMaximumSize(new java.awt.Dimension(156, 27));
        deal.setMinimumSize(new java.awt.Dimension(156, 27));
        deal.setPreferredSize(new java.awt.Dimension(156, 27));
        deal.setRequestFocusEnabled(false);
        deal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout shufflePanelLayout = new javax.swing.GroupLayout(shufflePanel);
        shufflePanel.setLayout(shufflePanelLayout);
        shufflePanelLayout.setHorizontalGroup(
            shufflePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, shufflePanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(overhand, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(riffle, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(deal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        shufflePanelLayout.setVerticalGroup(
            shufflePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, shufflePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(shufflePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deal, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(riffle, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(overhand, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        getContentPane().add(shufflePanel);
        shufflePanel.setBounds(0, 570, 624, 110);

        gamesetup.setOpaque(false);

        p1.setBackground(new java.awt.Color(51, 51, 51));
        p1.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        p1.setForeground(new java.awt.Color(255, 255, 255));
        p1.setText("Player 1");
        p1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p1ActionPerformed(evt);
            }
        });

        p2.setBackground(new java.awt.Color(51, 51, 51));
        p2.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        p2.setForeground(new java.awt.Color(255, 255, 255));
        p2.setText("Player 2");
        p2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2ActionPerformed(evt);
            }
        });

        p3.setBackground(new java.awt.Color(51, 51, 51));
        p3.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        p3.setForeground(new java.awt.Color(255, 255, 255));
        p3.setText("Player 3");
        p3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p3ActionPerformed(evt);
            }
        });

        p4.setBackground(new java.awt.Color(51, 51, 51));
        p4.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        p4.setForeground(new java.awt.Color(255, 255, 255));
        p4.setText("Player 4");
        p4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p4ActionPerformed(evt);
            }
        });

        p5.setBackground(new java.awt.Color(51, 51, 51));
        p5.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        p5.setForeground(new java.awt.Color(255, 255, 255));
        p5.setText("Player 5");
        p5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p5ActionPerformed(evt);
            }
        });

        playername.setFont(new java.awt.Font("Georgia", 1, 16)); // NOI18N
        playername.setForeground(new java.awt.Color(0, 102, 204));

        setName.setBackground(new java.awt.Color(51, 51, 51));
        setName.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        setName.setForeground(new java.awt.Color(255, 255, 255));
        setName.setText("Set Name");
        setName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setNameActionPerformed(evt);
            }
        });

        PlayerNames.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        PlayerNames.setForeground(new java.awt.Color(0, 102, 204));

        continueMessage.setFont(new java.awt.Font("Georgia", 1, 16)); // NOI18N
        continueMessage.setForeground(new java.awt.Color(0, 102, 204));

        Continue.setBackground(new java.awt.Color(51, 51, 51));
        Continue.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        Continue.setForeground(new java.awt.Color(255, 255, 255));
        Continue.setText("Continue");
        Continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueActionPerformed(evt);
            }
        });

        resetNames.setBackground(new java.awt.Color(51, 51, 51));
        resetNames.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        resetNames.setForeground(new java.awt.Color(255, 255, 255));
        resetNames.setText("Reset Names");
        resetNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetNamesActionPerformed(evt);
            }
        });

        resetCards.setBackground(new java.awt.Color(51, 51, 51));
        resetCards.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        resetCards.setForeground(new java.awt.Color(255, 255, 255));
        resetCards.setText("Reset Cards");
        resetCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCardsActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paper.jpg"))); // NOI18N

        javax.swing.GroupLayout gamesetupLayout = new javax.swing.GroupLayout(gamesetup);
        gamesetup.setLayout(gamesetupLayout);
        gamesetupLayout.setHorizontalGroup(
            gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamesetupLayout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamesetupLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(continueMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Continue, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gamesetupLayout.createSequentialGroup()
                        .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(p3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playername, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(p4, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(p5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enterName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setName)
                            .addComponent(resetNames, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(gamesetupLayout.createSequentialGroup()
                .addComponent(PlayerNames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetCards, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gamesetupLayout.setVerticalGroup(
            gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamesetupLayout.createSequentialGroup()
                .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlayerNames, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gamesetupLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(resetCards, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(79, 79, 79)
                .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetNames, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(enterName, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                        .addComponent(setName))
                    .addComponent(playername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(continueMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gamesetupLayout.createSequentialGroup()
                        .addComponent(Continue, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(gamesetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(gamesetup);
        gamesetup.setBounds(170, 90, 1310, 560);

        javax.swing.GroupLayout trickAreaLayout = new javax.swing.GroupLayout(trickArea);
        trickArea.setLayout(trickAreaLayout);
        trickAreaLayout.setHorizontalGroup(
            trickAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        trickAreaLayout.setVerticalGroup(
            trickAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );

        getContentPane().add(trickArea);
        trickArea.setBounds(870, 20, 650, 540);

        deck.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        card6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card6.setMaximumSize(new java.awt.Dimension(346, 528));
        card6.setMinimumSize(new java.awt.Dimension(346, 528));
        card6.setPreferredSize(new java.awt.Dimension(346, 528));
        card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card6ActionPerformed(evt);
            }
        });
        deck.add(card6);
        card6.setBounds(820, 530, 20, 30);

        card5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card5.setMaximumSize(new java.awt.Dimension(346, 528));
        card5.setMinimumSize(new java.awt.Dimension(346, 528));
        card5.setPreferredSize(new java.awt.Dimension(346, 528));
        card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card5ActionPerformed(evt);
            }
        });
        deck.add(card5);
        card5.setBounds(820, 510, 20, 20);

        card4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card4.setMaximumSize(new java.awt.Dimension(346, 528));
        card4.setMinimumSize(new java.awt.Dimension(346, 528));
        card4.setPreferredSize(new java.awt.Dimension(346, 528));
        card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card4ActionPerformed(evt);
            }
        });
        deck.add(card4);
        card4.setBounds(820, 490, 20, 20);

        card3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card3.setMaximumSize(new java.awt.Dimension(346, 528));
        card3.setMinimumSize(new java.awt.Dimension(346, 528));
        card3.setPreferredSize(new java.awt.Dimension(346, 528));
        card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card3ActionPerformed(evt);
            }
        });
        deck.add(card3);
        card3.setBounds(820, 470, 20, 20);

        card2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card2.setMaximumSize(new java.awt.Dimension(346, 528));
        card2.setMinimumSize(new java.awt.Dimension(346, 528));
        card2.setPreferredSize(new java.awt.Dimension(346, 528));
        card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card2ActionPerformed(evt);
            }
        });
        deck.add(card2);
        card2.setBounds(820, 450, 20, 20);

        card1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card1.setMaximumSize(new java.awt.Dimension(346, 528));
        card1.setMinimumSize(new java.awt.Dimension(346, 528));
        card1.setPreferredSize(new java.awt.Dimension(346, 528));
        card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card1ActionPerformed(evt);
            }
        });
        deck.add(card1);
        card1.setBounds(820, 430, 20, 20);

        card0.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        card0.setMaximumSize(new java.awt.Dimension(346, 528));
        card0.setMinimumSize(new java.awt.Dimension(346, 528));
        card0.setPreferredSize(new java.awt.Dimension(346, 528));
        card0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card0ActionPerformed(evt);
            }
        });
        deck.add(card0);
        card0.setBounds(820, 410, 20, 20);

        getContentPane().add(deck);
        deck.setBounds(29, 19, 840, 560);

        userMessage.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        userMessage.setForeground(new java.awt.Color(0, 102, 204));
        getContentPane().add(userMessage);
        userMessage.setBounds(0, 696, 1028, 61);

        userMessage3.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        userMessage3.setForeground(new java.awt.Color(0, 102, 204));
        getContentPane().add(userMessage3);
        userMessage3.setBounds(800, 610, 590, 70);

        userMessage2.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        userMessage2.setForeground(new java.awt.Color(0, 102, 204));
        getContentPane().add(userMessage2);
        userMessage2.setBounds(1010, 700, 610, 60);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/poker-table-background-green-color_47243-1068.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1630, 790);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void riffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_riffleActionPerformed
        shuffles++;
        picLabel.removeAll();
        riffle.setEnabled(false);
        overhand.setEnabled(false);
        userMessage.setText("You have performed "+shuffles+" shuffles.");
        dealing.riffle(dealing.cards);
       
        if(shuffles>6){
            deal.setEnabled(true);
        }
        riffle.setEnabled(true);
        overhand.setEnabled(true);
    }//GEN-LAST:event_riffleActionPerformed

    private void resetCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCardsActionPerformed
        shuffles = 0;
        picLabel.removeAll();
        //deck.remove()
        dealing.resetCards();
        riffle.setEnabled(false);
        overhand.setEnabled(false);
        
        riffle.setEnabled(true);
        overhand.setEnabled(true);
        userMessage2.setText("Cards have been reset.");
    }//GEN-LAST:event_resetCardsActionPerformed

    private void dealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealActionPerformed
        round++;
        picLabel.removeAll();
        riffle.setVisible(false);
        overhand.setVisible(false);
        deal.setVisible(false);
        
        userMessage2.setText("Cards have been dealt.");
        riffle.setEnabled(false);
        overhand.setEnabled(false);
        switch(round){
            case 1: 
                cardsLain=0;
                firstcardplayer=0;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                tricks = new String[count];
                playerTurn=0;//need a way of selecting this for start of game
                dealing.deal(7,count,dealing.cards);
                card0.setVisible(true);
                card1.setVisible(true);
                card2.setVisible(true);
                card3.setVisible(true);
                card4.setVisible(true);
                card5.setVisible(true);
                card6.setVisible(true);
                trumpinfo="Round 1: Trumps are "+dealing.trumpWord;//player choses new trumps each round
                userMessage2.setText(trumpinfo);
                showPlayerHand();
                break;
            case 2:
                firstcardplayer=playerTurn;
                cardsLain=0;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                score = new int[count];
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                tricks = new String[count];
                dealing.deal(6,count,dealing.cards);
                pickTrump.setVisible(true);
                lastWinnerPickMessage.setText(winnername+" needs to pick trumps because they won last round");
                trumpselection();
                card0.setEnabled(false);
                card1.setEnabled(false);
                card2.setEnabled(false);
                card3.setEnabled(false);
                card4.setEnabled(false);
                card5.setEnabled(false);
                card0.setVisible(true);
                card1.setVisible(true);
                card2.setVisible(true);
                card3.setVisible(true);
                card4.setVisible(true);
                card5.setVisible(true);
                break;
            case 3:
                firstcardplayer=playerTurn;
                cardsLain=0;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                score = new int[count];
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                tricks = new String[count];
                dealing.deal(5,count,dealing.cards);
                pickTrump.setVisible(true);
                lastWinnerPickMessage.setText(winnername+" needs to pick trumps because they won last round");
                trumpselection();
                card0.setEnabled(false);
                card1.setEnabled(false);
                card2.setEnabled(false);
                card3.setEnabled(false);
                card4.setEnabled(false);
                card0.setVisible(true);
                card1.setVisible(true);
                card2.setVisible(true);
                card3.setVisible(true);
                card4.setVisible(true);
                break;
            case 4:
                cardsLain=0;
                firstcardplayer=playerTurn;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                score = new int[count];
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                tricks = new String[count];
                dealing.deal(4,count,dealing.cards);
                pickTrump.setVisible(true);
                lastWinnerPickMessage.setText(winnername+" needs to pick trumps because they won last round");
                trumpselection();
                card0.setEnabled(false);
                card1.setEnabled(false);
                card2.setEnabled(false);
                card3.setEnabled(false);
                card0.setVisible(true);
                card1.setVisible(true);
                card2.setVisible(true);
                card3.setVisible(true);
                break;
            case 5:
                firstcardplayer=playerTurn;
                cardsLain=0;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                score = new int[count];
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                tricks = new String[count];
                dealing.deal(3,count,dealing.cards);
                pickTrump.setVisible(true);
                lastWinnerPickMessage.setText(winnername+" needs to pick trumps because they won last round");
                trumpselection();
                card0.setEnabled(false);
                card1.setEnabled(false);
                card2.setEnabled(false);
                card0.setVisible(true);
                card1.setVisible(true);
                card2.setVisible(true);
                break;
            case 6:
                firstcardplayer=playerTurn;
                cardsLain=0;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                score = new int[count];
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                
                tricks = new String[count];
                dealing.deal(2,count,dealing.cards);
                pickTrump.setVisible(true);
                lastWinnerPickMessage.setText(winnername+" needs to pick trumps because they won last round");
                trumpselection();
                card0.setEnabled(false);
                card1.setEnabled(false);
                card0.setVisible(true);
                card1.setVisible(true);
                break;
            case 7: 
                firstcardplayer=playerTurn;
                cardsLain=0;
                p1Used = new int[]{0,0,0,0,0,0,0};
                p2Used = new int[]{0,0,0,0,0,0,0};
                p3Used = new int[]{0,0,0,0,0,0,0};
                p4Used = new int[]{0,0,0,0,0,0,0};
                p5Used = new int[]{0,0,0,0,0,0,0};
                score = new int[count];
                for(int i=0;i<count;i++){
                    score[i]=0;
                }
                tricks = new String[count];
                dealing.deal(1,count,dealing.cards);
                pickTrump.setVisible(true);
                lastWinnerPickMessage.setText(winnername+" needs to pick trumps because they won last round");
                trumpselection();
                card0.setEnabled(false);
                card0.setVisible(true);
                break;
        }
        
        
        deal.setEnabled(false);
    }//GEN-LAST:event_dealActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        PlayerNames.setText("Player1:"+player1+"                Player2:"+player2+"                   Player3:"+player3+"              Player4:"+player4+"            Player5:"+player5);
        p1.setVisible(true);
        p2.setVisible(true);
        p3.setVisible(true);
        p4.setVisible(true);
        p5.setVisible(true);
        deal.setEnabled(false);
        GameOverScreen.setVisible(false);
        gamesetup.setLocation(160, 110);
        
        pickTrump.setVisible(false);
        riffle.setVisible(false);
        overhand.setVisible(false);
        resetCards.setVisible(false);
        deal.setVisible(false);
        enterName.setVisible(true);
        playername.setVisible(true);
        setName.setVisible(true);
        p1.setEnabled(true);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        card0.setVisible(false);
        card1.setVisible(false);
        card2.setVisible(false);
        card3.setVisible(false);
        card4.setVisible(false);
        card5.setVisible(false);
        card6.setVisible(false);
        Continue.setEnabled(false);
        enterName.setEnabled(false);
        playername.setEnabled(true);
        setName.setEnabled(false);
        card0.setOpaque(false);
        card0.setContentAreaFilled(false);
        card0.setBorderPainted(false);
        card1.setOpaque(false);
        card1.setContentAreaFilled(false);
        card1.setBorderPainted(false);
        card2.setOpaque(false);
        card2.setContentAreaFilled(false);
        card2.setBorderPainted(false);
        card3.setOpaque(false);
        card3.setContentAreaFilled(false);
        card3.setBorderPainted(false);
        card4.setOpaque(false);
        card4.setContentAreaFilled(false);
        card4.setBorderPainted(false);
        card5.setOpaque(false);
        card5.setContentAreaFilled(false);
        card5.setBorderPainted(false);
        card6.setOpaque(false);
        card6.setContentAreaFilled(false);
        card6.setBorderPainted(false);
    }//GEN-LAST:event_formWindowOpened

    private void overhandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overhandActionPerformed
        shuffles++;
        picLabel.removeAll();
        riffle.setEnabled(false);
        overhand.setEnabled(false);
        dealing.overhand(dealing.cards);
        
        if(shuffles>6){
            deal.setEnabled(true);
        }
        riffle.setEnabled(true);
        overhand.setEnabled(true);
        userMessage.setText("You have performed "+shuffles+" shuffles.");
    }//GEN-LAST:event_overhandActionPerformed

    private void p1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p1ActionPerformed
        playerNameEnter = 1;
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        p1edit = true;
        playername.setText("Player 1 Enter name:");
        setName.setEnabled(true);
        enterName.setEnabled(true);
        enterName.grabFocus();
        enterName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setName.doClick();
            }
                
        });
    }//GEN-LAST:event_p1ActionPerformed

    private void p2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2ActionPerformed
        playerNameEnter = 2;
        p2edit = true;
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        playername.setText("Player 2 Enter name:");
        setName.setEnabled(true);
        enterName.setEnabled(true);
        enterName.grabFocus();
        enterName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setName.doClick();
            }
                
        });
    }//GEN-LAST:event_p2ActionPerformed

    private void p3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p3ActionPerformed
        playerNameEnter = 3;
        p3edit = true;
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        playername.setText("Player 3 Enter name:");
        setName.setEnabled(true);
        enterName.setEnabled(true);
        enterName.grabFocus();
        enterName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setName.doClick();
            }
                
        });
    }//GEN-LAST:event_p3ActionPerformed

    private void p4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p4ActionPerformed
        playerNameEnter = 4;
        p4edit = true;
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        playername.setText("Player 4 Enter name:");
        setName.setEnabled(true);
        enterName.setEnabled(true);
        enterName.grabFocus();
        enterName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setName.doClick();
            }
                
        });
    }//GEN-LAST:event_p4ActionPerformed

    private void p5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p5ActionPerformed
        playerNameEnter = 5;
        p5edit = true;
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        playername.setText("Player 5 Enter name:");
        setName.setEnabled(true);
        enterName.setEnabled(true);
        enterName.grabFocus();
        enterName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setName.doClick();
            }
                
        });
    }//GEN-LAST:event_p5ActionPerformed

    private void setNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setNameActionPerformed
        String name = enterName.getText();
        switch(playerNameEnter){
                case 1:
                    player1 = name;
                    playernames[0]= player1;
                    p1.setEnabled(true);
                    p2.setEnabled(true);
                    break;
                case 2:
                    player2 = name;
                    playernames[1]= player2;
                    p1.setEnabled(true);
                    p2.setEnabled(true);
                    p3.setEnabled(true);
                    break;
                case 3:
                    player3 = name;         
                    playernames[2]= player3;
                    p1.setEnabled(true);
                    p2.setEnabled(true);
                    p3.setEnabled(true);
                    p4.setEnabled(true);
                    break;
                case 4:
                    player4 = name;
                    playernames[3]= player4;
                    p1.setEnabled(true);
                    p2.setEnabled(true);
                    p3.setEnabled(true);
                    p4.setEnabled(true);
                    p5.setEnabled(true);
                    break;
                case 5:
                    player5 = name;
                    playernames[4]= player5;
                    p1.setEnabled(true);
                    p2.setEnabled(true);
                    p3.setEnabled(true);
                    p4.setEnabled(true);
                    p5.setEnabled(true);
                    break;
        }
        
        PlayerNames.setText("Player1:"+player1+"                Player2:"+player2+"                   Player3:"+player3+"              Player4:"+player4+"            Player5:"+player5);
        enterName.setText("");
        playername.setText("");
        int i,count=0;
        for (i=0;i<5;i++){
            if (playernames[i] != null){
                count++;
            }
        }
        if (count>1){
            continueMessage.setText("Continue with "+count+" players?");
            Continue.setEnabled(true);
        }
        else{
            continueMessage.setText("You need 2 or more players");
        }
        setName.setEnabled(false);
        enterName.setEnabled(false);
    }//GEN-LAST:event_setNameActionPerformed

    private void resetNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetNamesActionPerformed
        p1.setEnabled(true);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        player1=null;
        player2=null;
        player3=null;
        player4=null;
        player5=null;
        playernames = new String[]{null,null,null,null,null};
        count=0;
        continueMessage.setText("");
        Continue.setEnabled(false);
        PlayerNames.setText("Player1:"+player1+"                Player2:"+player2+"                   Player3:"+player3+"              Player4:"+player4+"            Player5:"+player5);
    }//GEN-LAST:event_resetNamesActionPerformed

    private void ContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinueActionPerformed
        int i;
        count=0;
        for (i=0;i<5;i++){
            if (playernames[i] != null){
                count++;
            }
        }
        numberOfPlayers = count;
        p1.setVisible(false);
        p2.setVisible(false);
        p3.setVisible(false);
        p4.setVisible(false);
        p5.setVisible(false);
        resetNames.setVisible(false);
        PlayerNames.setVisible(false);
        Continue.setVisible(false);
        riffle.setVisible(true);
        overhand.setVisible(true);
        resetCards.setVisible(true);
        deal.setVisible(true);
        enterName.setVisible(false);
        playername.setVisible(false);
        continueMessage.setVisible(false);
        setName.setVisible(false);
        gamesetup.setLocation(-5000, -5000);
        gamesetup.setVisible(false);
        userMessage.setText("Shuffle and deal the cards.");
        score = new int[count];
    }//GEN-LAST:event_ContinueActionPerformed

    private void card0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card0ActionPerformed
        
        choice =0;
        switch(playerTurn){
            case 0:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[0];
               dealing.p1[0] = "";
               p1Used[0]=1;
               break;
            case 1:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[0]; 
               dealing.p2[0] = "";
               p2Used[0]=1;
               break;
            case 2:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p3[0]; 
               dealing.p3[0] = "";
               p3Used[0]=1;
               break;
            case 3:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[0]; 
               dealing.p4[0] = "";
               p4Used[0]=1;
               break;
            case 4:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[0]; 
               dealing.p5[0] = "";
               p5Used[0]=1;
               break;
        }
        cardsLain++;
        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }
        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true);
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            ScoreAnalyse sa = new ScoreAnalyse(score);
            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" was knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){
                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }else{
                
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }
    }//GEN-LAST:event_card0ActionPerformed

    private void card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card1ActionPerformed
        choice =1;
        switch(playerTurn){
            case 0:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[1];
               dealing.p1[1] = "";
               p1Used[1]=1;
               break;
            case 1:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[1]; 
               dealing.p2[1] = "";
               p2Used[1]=1;
               break;
            case 2:
               trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p3[1]; 
               dealing.p3[1] = "";
               p3Used[1]=1;
               break;
            case 3:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[1]; 
               dealing.p4[1] = "";
               p4Used[1]=1;
               break;
            case 4:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[1]; 
               dealing.p5[1] = "";
               p5Used[1]=1;
               break;
        }
        cardsLain++;
        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }

        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;

            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();

            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true);
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            ScoreAnalyse sa = new ScoreAnalyse(score);

            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            //winner now needs to pick trumps
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){

                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }

    }//GEN-LAST:event_card1ActionPerformed

    private void card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card2ActionPerformed
       
        choice =2;
        switch(playerTurn){
            case 0:
                trickLabel.removeAll();
                trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[2];
               dealing.p1[2] = "";
               p1Used[2]=1;
               break;
            case 1:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[2]; 
               dealing.p2[2] = "";
               p2Used[2]=1;
               break;
            case 2:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p3[2]; 
               dealing.p3[2] = "";
               p3Used[2]=1;
               break;
            case 3:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[2]; 
               dealing.p4[2] = "";
               p4Used[2]=1;
               break;
            case 4:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[2]; 
               dealing.p5[2] = "";
               p5Used[2]=1;
               break;
        }
        cardsLain++;

        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }

        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;

            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();

            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true);
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            ScoreAnalyse sa = new ScoreAnalyse(score);

            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            winnername = playernames[playerTurn];
            //winner now needs to pick trumps
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" was knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){
                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }
    }//GEN-LAST:event_card2ActionPerformed

    private void card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card3ActionPerformed
        
        choice =3;
        switch(playerTurn){
            case 0:
                trickLabel.removeAll();
                trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[3];
               dealing.p1[3] = "";
               p1Used[3]=1;
               break;
            case 1:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[3]; 
               dealing.p2[3] = "";
               p2Used[3]=1;
               break;
            case 2:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p3[3]; 
               dealing.p3[3] = "";
               p3Used[3]=1;
               break;
            case 3:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[3]; 
               dealing.p4[3] = "";
               p4Used[3]=1;
               break;
            case 4:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[3]; 
               dealing.p5[3] = "";
               p5Used[3]=1;
               break;
        }
        cardsLain++;
        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }

        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true);
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            ScoreAnalyse sa = new ScoreAnalyse(score);
            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            //winner now needs to pick trumps
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" was knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){
                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }
    }//GEN-LAST:event_card3ActionPerformed

    private void card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card4ActionPerformed
        choice =4;
        switch(playerTurn){
            case 0:
                trickLabel.removeAll();
                trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[4];
               dealing.p1[4] = "";
               p1Used[4]=1;
               break;
            case 1:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[4]; 
               dealing.p2[4] = "";
               p2Used[4]=1;
               break;
            case 2:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p3[4]; 
               dealing.p3[4] = "";
               p3Used[4]=1;
               break;
            case 3:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[4]; 
               dealing.p4[4] = "";
               p4Used[4]=1;
               break;
            case 4:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[4]; 
               dealing.p5[4] = "";
               p5Used[4]=1;
               break;
        }
        cardsLain++;
        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }
        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true);
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            ScoreAnalyse sa = new ScoreAnalyse(score);
            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            //winner now needs to pick trumps
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" was knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){
                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }
        
    }//GEN-LAST:event_card4ActionPerformed

    private void card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card5ActionPerformed
        choice =5;
        switch(playerTurn){
            case 0:
                trickLabel.removeAll();
                trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[5];
               dealing.p1[5] = "";
               p1Used[5]=1;
               break;
            case 1:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[5]; 
               dealing.p2[5] = "";
               p2Used[5]=1;
               break;
            case 2:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p3[5]; 
               dealing.p3[5] = "";
               p3Used[5]=1;
               break;
            case 3:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[5]; 
               dealing.p4[5] = "";
               p4Used[5]=1;
               break;
            case 4:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[5]; 
               dealing.p5[5] = "";
               p5Used[5]=1;
               break;
        }
        cardsLain++;

        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }

        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;
  
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
        
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true);
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            ScoreAnalyse sa = new ScoreAnalyse(score);

            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            //winner now needs to pick trumps
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" was knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){
              
                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }
    
    }//GEN-LAST:event_card5ActionPerformed

    private void card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card6ActionPerformed
        choice =6;
        switch(playerTurn){
            case 0:
                trickLabel.removeAll();
                trickArea.removeAll();
               tricks[cardsLain]=dealing.p1[6];
               dealing.p1[6] = "";
               p1Used[6]=1;
               break;
            case 1:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p2[6];
               dealing.p2[6] = "";
               p2Used[6]=1;
               break;
            case 2:
               tricks[cardsLain]=dealing.p3[6]; 
               dealing.p3[6] = "";
               p3Used[6]=1;
               break;
            case 3:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p4[6]; 
               dealing.p4[6] = "";
               p4Used[6]=1;
               break;
            case 4:
                trickLabel.removeAll();
               trickArea.removeAll();
               tricks[cardsLain]=dealing.p5[6]; 
               dealing.p5[6] = "";
               p5Used[6]=1;
               break;
        }
        cardsLain++;
    
        int startingPosition = count;
        for(int i=count-1;i>=0;i--){
            if(tricks[i]!=null){
                startingPosition =i;
                break;
            }else{
                startingPosition = count;
            }
        }
        try {
            for(int x =0;x<=startingPosition;x++){
                URL resource = GameWindow.class.getResource("/cards/"+tricks[x]+"_50.png");
                BufferedImage myPicture = ImageIO.read(resource);
                trickLabel = new JLabel(new ImageIcon(myPicture));
                trickLabel.setSize(364,528);
                trickLabel.setLocation(-8+(x*55), 2);
                trickArea.add(trickLabel,0);
                trickArea.revalidate();
                trickArea.repaint();
            } 
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cardsLeft=0;
        for(int i =0;i<dealing.p1.length;i++){
            if(dealing.p1[i]!=null&&!"".equals(dealing.p1[i])){
                cardsLeft++;
            }
            if(dealing.p2[i]!=null&&!"".equals(dealing.p2[i])){
                cardsLeft++;
            }
            if(dealing.p3[i]!=null&&!"".equals(dealing.p3[i])){
                cardsLeft++;
            }
            if(dealing.p4[i]!=null&&!"".equals(dealing.p4[i])){
                cardsLeft++;
            }
            if(dealing.p5[i]!=null&&!"".equals(dealing.p5[i])){
                cardsLeft++;
            }
        }
        
        if(firstcardplayer-1==-1){firstcardplayer=count;}
        if((playerTurn==firstcardplayer-1)&&(cardsLeft>0)){
            cardsLain=0;
           
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
           
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++; 
            userMessage3.setText(playernames[prev_round_winner]+" won that trick!");
            playerTurn=prev_round_winner;
            firstcardplayer = prev_round_winner;
            for(int i=0;i<count;i++){
                    tricks[i]=null;
                }
            showPlayerHand();
        }else if(cardsLeft==0){
            deck.removeAll();
            deck.repaint();
            
            trickLabel.removeAll();
            trickArea.removeAll();
            picLabel.removeAll();
            card0.setVisible(false);
            card1.setVisible(false);
            card2.setVisible(false);
            card3.setVisible(false);
            card4.setVisible(false);
            card5.setVisible(false);
            card6.setVisible(false);
            overhand.setEnabled(true); 
            riffle.setEnabled(true);
            shuffles=0;
            riffle.setVisible(true);
            overhand.setVisible(true);
            deal.setVisible(true);
            TrickAnalyse ta = new TrickAnalyse(tricks,dealing.trump);
            prev_round_winner = ta.analyse();
            prev_round_winner+=firstcardplayer;
            if(prev_round_winner>count-1){prev_round_winner-=count;}
            score[prev_round_winner]++;
            ScoreAnalyse sa = new ScoreAnalyse(score);
            playerTurn=sa.analyse();
            userMessage3.setText(playernames[playerTurn]+" won that round!");
            winnername = playernames[playerTurn];
            //winner now needs to pick trumps
            String knockoutMessage="";
            for(int i=0;i<sa.losers.length;i++){
                if(i!=sa.losers.length-2 & i!=sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]]+", ";
                }else if(i==sa.losers.length-2){
                    knockoutMessage+=playernames[sa.losers[i]]+" and ";
                }else if(i==sa.losers.length-1){
                    knockoutMessage+=playernames[sa.losers[i]];
                }
            }
            if(sa.losers.length==1){
                playerOut(sa.losers);
                knockoutMessage+=" was knocked out.";
            }else if(sa.losers.length>1){
                playerOut(sa.losers);
                knockoutMessage+=" were knocked out.";
            }
            userMessage.setText(knockoutMessage);
            //end of game
            if(count==1){
                gameover = true;
                GameOverScreen.setVisible(true);
                winnerLabel.setText(playernames[0]+" won this game!");
            }
        }else{
           if(playerTurn== count-1){
               playerTurn=0;
           }else{
               playerTurn++;
           }
           showPlayerHand();
        }
    }//GEN-LAST:event_card6ActionPerformed

    private void spadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spadesActionPerformed
        Dealing.trump = "S";
        Dealing.trumpWord = "Spades";
        userMessage2.setText("Round "+round+": Trumps are "+dealing.trumpWord);
        pickTrump.setVisible(false);
        showPlayerHand();
        card0.setEnabled(true);
        card1.setEnabled(true);
        card2.setEnabled(true);
        card3.setEnabled(true);
        card4.setEnabled(true);
        card5.setEnabled(true);
        card6.setEnabled(true);
    }//GEN-LAST:event_spadesActionPerformed

    private void heartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartsActionPerformed
        Dealing.trump = "H";
        Dealing.trumpWord = "Hearts";
        userMessage2.setText("Round "+round+": Trumps are "+dealing.trumpWord);
        pickTrump.setVisible(false);
        showPlayerHand();
        card0.setEnabled(true);
        card1.setEnabled(true);
        card2.setEnabled(true);
        card3.setEnabled(true);
        card4.setEnabled(true);
        card5.setEnabled(true);
        card6.setEnabled(true);
    }//GEN-LAST:event_heartsActionPerformed

    private void clubsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clubsActionPerformed
        Dealing.trump = "C";
        Dealing.trumpWord = "Clubs";
        userMessage2.setText("Round "+round+": Trumps are "+dealing.trumpWord);
        pickTrump.setVisible(false);
        showPlayerHand();
        card0.setEnabled(true);
        card1.setEnabled(true);
        card2.setEnabled(true);
        card3.setEnabled(true);
        card4.setEnabled(true);
        card5.setEnabled(true);
        card6.setEnabled(true);
    }//GEN-LAST:event_clubsActionPerformed

    private void diamondsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diamondsActionPerformed
       Dealing.trump = "D";
       Dealing.trumpWord = "Diamonds";
       userMessage2.setText("Round "+round+": Trumps are "+dealing.trumpWord);
       pickTrump.setVisible(false);
       showPlayerHand();
       card0.setEnabled(true);
        card1.setEnabled(true);
        card2.setEnabled(true);
        card3.setEnabled(true);
        card4.setEnabled(true);
        card5.setEnabled(true);
        card6.setEnabled(true);
    }//GEN-LAST:event_diamondsActionPerformed

    private void playAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainActionPerformed
        PlayerNames.setText("Player1:"+player1+"                Player2:"+player2+"                   Player3:"+player3+"              Player4:"+player4+"            Player5:"+player5);
        PlayerNames.setVisible(true);
        gamesetup.setVisible(true);
        gamesetup.setLocation(160, 110);
        round=0;
        resetNames.setVisible(true);
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3.setEnabled(false);
        p4.setEnabled(false);
        p5.setEnabled(false);
        Continue.setVisible(true);
        p1.setVisible(true);
        p2.setVisible(true);
        p3.setVisible(true);
        p4.setVisible(true);
        p5.setVisible(true);
        playerNameEnter = numberOfPlayers;
        switch(numberOfPlayers){
            
            case 2:
                p1.setEnabled(true);
                p2.setEnabled(true);
                p3.setEnabled(true);
                break;
            case 3:
                p1.setEnabled(true);
                p2.setEnabled(true);
                p3.setEnabled(true);
                p4.setEnabled(true);
                break;
            case 4:
                p1.setEnabled(true);
                p2.setEnabled(true);
                p3.setEnabled(true);
                p4.setEnabled(true);
                p5.setEnabled(true);
                break;
            case 5:
                p1.setEnabled(true);
                p2.setEnabled(true);
                p3.setEnabled(true);
                p4.setEnabled(true);
                p5.setEnabled(true);
                break;
        }
        deal.setEnabled(false);

        playernames[0]= player1;         
        playernames[1]= player2;                  
        playernames[2]= player3;      
        playernames[3]= player4;
        playernames[4]= player5;
        int i;
        count=0;
        for (i=0;i<5;i++){
            if (playernames[i] != null){
                count++;
            }
        }
        continueMessage.setText("Continue with "+count+" players?");
        continueMessage.setVisible(true);
        GameOverScreen.setVisible(false);
        pickTrump.setVisible(false);
        riffle.setVisible(false);
        overhand.setVisible(false);
        resetCards.setVisible(false);
        deal.setVisible(false);
        enterName.setVisible(true);
        playername.setVisible(true);
        setName.setVisible(true);
        userMessage.setText("");
        userMessage2.setText("");
        userMessage3.setText("");
        card0.setVisible(false);
        card1.setVisible(false);
        card2.setVisible(false);
        card3.setVisible(false);
        card4.setVisible(false);
        card5.setVisible(false);
        card6.setVisible(false);
        Continue.setEnabled(true);
        enterName.setEnabled(false);
        playername.setEnabled(true);
        setName.setEnabled(false);
        card0.setOpaque(false);
        card0.setContentAreaFilled(false);
        card0.setBorderPainted(false);
        card1.setOpaque(false);
        card1.setContentAreaFilled(false);
        card1.setBorderPainted(false);
        card2.setOpaque(false);
        card2.setContentAreaFilled(false);
        card2.setBorderPainted(false);
        card3.setOpaque(false);
        card3.setContentAreaFilled(false);
        card3.setBorderPainted(false);
        card4.setOpaque(false);
        card4.setContentAreaFilled(false);
        card4.setBorderPainted(false);
        card5.setOpaque(false);
        card5.setContentAreaFilled(false);
        card5.setBorderPainted(false);
        card6.setOpaque(false);
        card6.setContentAreaFilled(false);
        card6.setBorderPainted(false);
    }//GEN-LAST:event_playAgainActionPerformed
    private void showPlayerHand(){
        switch(playerTurn){
            case 0:
                cardAccess(p1Used);
                illegalCards(dealing.p1);
                int lengthOfHand = dealing.p1.length;
                deck.removeAll();
                userMessage.setText(playernames[playerTurn]+" play a card");
                
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p1[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        JButton picLabel = new JButton();
                        if("".equals(dealing.p1[x])){
                            picLabel.setEnabled(false);
                            picLabel.setLocation(-1000, -1000);
                        }else{
                            picLabel.setName(buttons[x]);
                            switch(picLabel.getName()){
                                        case "card00":
                                            if(card0.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                            
                                            break;
                                        case "card01":
                                            if(card1.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card02":
                                            if(card2.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card03":
                                            if(card3.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card04":
                                            if(card4.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card05":
                                            if(card5.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card06":
                                            if(card6.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }
                                            break;
                                    }
                            picLabel.setIcon(new ImageIcon(myPicture));
                            picLabel.setOpaque(false);
                            picLabel.setContentAreaFilled(false);
                            picLabel.setBorderPainted(false);
                            picLabel.setSize(347,528);
                            picLabel.setLocation((x*75), 2);
                            picLabel.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    switch(picLabel.getName()){
                                        case "card00":
                                            
                                            card0.doClick();
                                            break;
                                        case "card01":
                                            
                                            card1.doClick();
                                            break;
                                        case "card02":
                                            
                                            card2.doClick();
                                            break;
                                        case "card03":
                                            
                                            card3.doClick();
                                            break;
                                        case "card04":
                                            
                                            card4.doClick();
                                            break;
                                        case "card05":
                                            
                                            card5.doClick();
                                            break;
                                        case "card06":
                                             
                                            card6.doClick();
                                            break;
                                    }
                                }
                            });
                        }
                        deck.add(picLabel);
                        deck.revalidate();
                        deck.repaint();
                        
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                break;
            
            
            case 1:
                lengthOfHand = dealing.p2.length;
                cardAccess(p2Used);
                illegalCards(dealing.p2);
                deck.removeAll();
                userMessage.setText(playernames[playerTurn]+" play a card");
                
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p2[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        JButton picLabel = new JButton();
                        if("".equals(dealing.p2[x])){
                            picLabel.setEnabled(false);
                            picLabel.setLocation(-1000, -1000);
                        }else{
                            picLabel.setName(buttons[x]);
                            picLabel.setIcon(new ImageIcon(myPicture));
                            picLabel.setOpaque(false);
                            picLabel.setContentAreaFilled(false);
                            switch(picLabel.getName()){
                                        case "card00":
                                            if(card0.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                            
                                            break;
                                        case "card01":
                                            if(card1.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card02":
                                            if(card2.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card03":
                                            if(card3.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card04":
                                            if(card4.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card05":
                                            if(card5.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card06":
                                            if(card6.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }
                                            break;
                                    }
                            picLabel.setBorderPainted(false);
                            picLabel.setSize(347,528);
                            picLabel.setLocation((x*75), 2);
                            picLabel.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    switch(picLabel.getName()){
                                        case "card00":
                                            
                                            
                                            card0.doClick();
                                            break;
                                        case "card01":
                                            
                                            card1.doClick();
                                            break;
                                        case "card02":
                                            
                                            card2.doClick();
                                            break;
                                        case "card03":
                                            
                                            card3.doClick();
                                            break;
                                        case "card04":
                                            
                                            card4.doClick();
                                            break;
                                        case "card05":
                                           
                                            card5.doClick();
                                            break;
                                        case "card06":
                                             
                                            card6.doClick();
                                            break;
                                    }
                                }
                            });
                        }
                        deck.add(picLabel);
                        deck.revalidate();
                        deck.repaint();
                        
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                break;
            case 2:
                lengthOfHand = dealing.p3.length;
                cardAccess(p3Used);
                illegalCards(dealing.p3);
                deck.removeAll();
                userMessage.setText(playernames[playerTurn]+" play a card");
                
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p3[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        JButton picLabel = new JButton();
                        if("".equals(dealing.p3[x])){
                            picLabel.setEnabled(false);
                            picLabel.setLocation(-1000, -1000);
                        }else{
                            picLabel.setName(buttons[x]);
                            picLabel.setIcon(new ImageIcon(myPicture));
                            picLabel.setOpaque(false);
                            picLabel.setContentAreaFilled(false);
                            picLabel.setBorderPainted(false);
                            picLabel.setSize(347,528);
                            switch(picLabel.getName()){
                                        case "card00":
                                            if(card0.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                            
                                            break;
                                        case "card01":
                                            if(card1.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card02":
                                            if(card2.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card03":
                                            if(card3.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card04":
                                            if(card4.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card05":
                                            if(card5.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card06":
                                            if(card6.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }
                                            break;
                                    }
                            picLabel.setLocation((x*75), 2);
                            picLabel.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    switch(picLabel.getName()){
                                        case "card00":
                                            
                                            card0.doClick();
                                            break;
                                        case "card01":
                                           
                                            card1.doClick();
                                            break;
                                        case "card02":
                                      
                                            card2.doClick();
                                            break;
                                        case "card03":
                                         
                                            card3.doClick();
                                            break;
                                        case "card04":
                                        
                                            card4.doClick();
                                            break;
                                        case "card05":
                                           
                                            card5.doClick();
                                            break;
                                        case "card06":
                                           
                                            card6.doClick();
                                            break;
                                    }
                                }
                            });
                        }
                        deck.add(picLabel);
                        deck.revalidate();
                        deck.repaint();
                        
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                break;
            case 3:
                lengthOfHand = dealing.p4.length;
                cardAccess(p4Used);
                illegalCards(dealing.p4);
                deck.removeAll();
                userMessage.setText(playernames[playerTurn]+" play a card");
                
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p4[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        JButton picLabel = new JButton();
                        if("".equals(dealing.p4[x])){
                            picLabel.setEnabled(false);
                            picLabel.setLocation(-1000, -1000);
                        }else{
                            picLabel.setName(buttons[x]);
                            picLabel.setIcon(new ImageIcon(myPicture));
                            picLabel.setOpaque(false);
                            picLabel.setContentAreaFilled(false);
                            picLabel.setBorderPainted(false);
                            switch(picLabel.getName()){
                                        case "card00":
                                            if(card0.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                            
                                            break;
                                        case "card01":
                                            if(card1.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card02":
                                            if(card2.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card03":
                                            if(card3.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card04":
                                            if(card4.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card05":
                                            if(card5.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card06":
                                            if(card6.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }
                                            break;
                                    }
                            picLabel.setSize(347,528);
                            picLabel.setLocation((x*75), 2);
                            picLabel.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    switch(picLabel.getName()){
                                        case "card00":
                                          
                                            card0.doClick();
                                            break;
                                        case "card01":
                                           
                                            card1.doClick();
                                            break;
                                        case "card02":
                                          
                                            card2.doClick();
                                            break;
                                        case "card03":
                                           
                                            card3.doClick();
                                            break;
                                        case "card04":
                                          
                                            card4.doClick();
                                            break;
                                        case "card05":
                                          
                                            card5.doClick();
                                            break;
                                        case "card06":
                                           
                                            card6.doClick();
                                            break;
                                    }
                                }
                            });
                        }
                        deck.add(picLabel);
                        deck.revalidate();
                        deck.repaint();
                        
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                break;
            case 4:
                cardAccess(p5Used);
                illegalCards(dealing.p5);
                lengthOfHand = dealing.p5.length;
                userMessage.setText(playernames[playerTurn]+" play a card");
                deck.removeAll();
               
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p5[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        JButton picLabel = new JButton();
                        if("".equals(dealing.p5[x])){
                            picLabel.setEnabled(false);
                            picLabel.setLocation(-1000, -1000);
                        }else{
                            picLabel.setName(buttons[x]);
                            
                            picLabel.setIcon(new ImageIcon(myPicture));
                            picLabel.setOpaque(false);
                            picLabel.setContentAreaFilled(false);
                            picLabel.setBorderPainted(false);
                            switch(picLabel.getName()){
                                        case "card00":
                                            if(card0.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                            
                                            break;
                                        case "card01":
                                            if(card1.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card02":
                                            if(card2.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card03":
                                            if(card3.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                           
                                            break;
                                        case "card04":
                                            if(card4.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card05":
                                            if(card5.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }                                          
                                            break;
                                        case "card06":
                                            if(card6.isEnabled()==false){
                                                picLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                                picLabel.setEnabled(false);
                                            }
                                            break;
                                    }
                            picLabel.setSize(347,528);
                            picLabel.setLocation((x*75), 2);
                            picLabel.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    switch(picLabel.getName()){
                                        case "card00":
                                       
                                            card0.doClick();
                                            break;
                                        case "card01":

                                            card1.doClick();
                                            break;
                                        case "card02":
                                           
                                            card2.doClick();
                                            break;
                                        case "card03":
                                        
                                            card3.doClick();
                                            break;
                                        case "card04":
                                          
                                            card4.doClick();
                                            break;
                                        case "card05":
                                          
                                            card5.doClick();
                                            break;
                                        case "card06":
                                           
                                            card6.doClick();
                                            break;
                                    }
                                }
                            });
                        }
                        deck.add(picLabel);
                        deck.revalidate();
                        deck.repaint();
                        
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
               
                break;
                
            
        }
    } 
    private void trumpselection(){
        for(int i=0;i<playernames.length;i++){
            if(playernames[i].equals(winnername)){
                firstcardplayer=i;
                break;
            }
        }    
        playerTurn=firstcardplayer;
        switch(firstcardplayer){
            case 0:
                picLabel.removeAll();
                deckForTPick.removeAll();
                int lengthOfHand = dealing.p1.length;
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p1[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        picLabel = new JLabel(new ImageIcon(myPicture));
                        picLabel.setSize(364,528);
                        picLabel.setLocation(-8+(x*75), 2);
                        deckForTPick.add(picLabel);
                        deckForTPick.revalidate();
                        deckForTPick.repaint();
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 1:
                picLabel.removeAll();
                deckForTPick.removeAll();
                lengthOfHand = dealing.p2.length;
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p2[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        picLabel = new JLabel(new ImageIcon(myPicture));
                        picLabel.setSize(364,528);
                        picLabel.setLocation(-8+(x*75), 2);
                        deckForTPick.add(picLabel);
                        deckForTPick.revalidate();
                        deckForTPick.repaint();
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 2:
                picLabel.removeAll();
                deckForTPick.removeAll();
                lengthOfHand = dealing.p3.length;
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p3[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        picLabel = new JLabel(new ImageIcon(myPicture));
                        picLabel.setSize(364,528);
                        picLabel.setLocation(-8+(x*75), 2);
                        deckForTPick.add(picLabel);
                        deckForTPick.revalidate();
                        deckForTPick.repaint();
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 3:
                picLabel.removeAll();
                deckForTPick.removeAll();
                lengthOfHand = dealing.p4.length;
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p4[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        picLabel = new JLabel(new ImageIcon(myPicture));
                        picLabel.setSize(364,528);
                        picLabel.setLocation(-8+(x*75), 2);
                        deckForTPick.add(picLabel);
                        deckForTPick.revalidate();
                        deckForTPick.repaint();
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 4:
                picLabel.removeAll();
                deckForTPick.removeAll();
                lengthOfHand = dealing.p5.length;
                try {
                    for(int x =(lengthOfHand-1);x>=0;x--){
                        URL resource = GameWindow.class.getResource("/cards/"+dealing.p5[x]+"_50.png");
                        BufferedImage myPicture = ImageIO.read(resource);
                        picLabel = new JLabel(new ImageIcon(myPicture));
                        picLabel.setSize(364,528);
                        picLabel.setLocation(-8+(x*75), 2);
                        deckForTPick.add(picLabel);
                        deckForTPick.revalidate();
                        deckForTPick.repaint();
                } 
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            
            
        }    
    }
    private void cardAccess(int[] used){
        for(int i=0;i<used.length;i++){
            if(used[i]==1){
                switch(i){
                    case 0:
                        card0.setEnabled(false);
                        break;
                    case 1:
                        card1.setEnabled(false);
                        break;
                    case 2:
                        card2.setEnabled(false);
                        break;
                    case 3:
                        card3.setEnabled(false);
                        break;
                    case 4:
                        card4.setEnabled(false);
                        break;
                    case 5:
                        card5.setEnabled(false);
                        break;
                    case 6:
                        card6.setEnabled(false);
                        break;
                  
                }
            }else if(used[i]==0){
                switch(i){
                    case 0:
                        card0.setEnabled(true);
                        break;
                    case 1:
                        card1.setEnabled(true);
                        break;
                    case 2:
                        card2.setEnabled(true);
                        break;
                    case 3:
                        card3.setEnabled(true);
                        break;
                    case 4:
                        card4.setEnabled(true);
                        break;
                    case 5:
                        card5.setEnabled(true);
                        break;
                    case 6:
                        card6.setEnabled(true);
                        break;
                }            
            }
        }
    }
    private void illegalCards(String[] hand){
        card0.setCursor(new Cursor(Cursor.HAND_CURSOR));
        card1.setCursor(new Cursor(Cursor.HAND_CURSOR));
        card2.setCursor(new Cursor(Cursor.HAND_CURSOR));
        card3.setCursor(new Cursor(Cursor.HAND_CURSOR));
        card4.setCursor(new Cursor(Cursor.HAND_CURSOR));
        card5.setCursor(new Cursor(Cursor.HAND_CURSOR));
        card6.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        HandAnalyse ha = new HandAnalyse(hand, dealing.trump, tricks);
        int[] illegal = ha.analyse();
        for(int i=0;i<illegal.length;i++){
            int item = illegal[i];
            switch(item){
                    case 999:
                        
                        card0.setEnabled(false);
                        card0.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 1:
                        
                        card1.setEnabled(false);
                        card1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 2:
                        
                        card2.setEnabled(false);
                        card2.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 3:
                        
                        card3.setEnabled(false);
                        card3.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 4:
                        
                        card4.setEnabled(false);
                        card4.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 5:
                        
                        card5.setEnabled(false);
                        card5.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 6:
                        
                        card6.setEnabled(false);
                        card6.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        break;
                    case 0:
                        break;
                }
        }
    }
    
    private void playerOut(int[] losers){
        count=0;
        for (int i=0;i<5;i++){
            if (playernames[i] != null){
                count++;
            }
        }
        String[] temp = new String[count-losers.length];
        for(int i=0;i<losers.length;i++){
            playernames[losers[i]]= null;
        }
        count-=losers.length;
        int x=0;
        for(int i=0;i<5;i++){
            if(playernames[i]!=null){
                temp[x]=playernames[i];
                x++;
            }
        }
        for(int i=0;i<5;i++){
            playernames[i]=null;
        }
        for(int i=0;i<temp.length;i++){
            playernames[i]=temp[i];
        }
    }    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try { 
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Continue;
    private javax.swing.JLabel GObackground;
    private javax.swing.JPanel GameOverScreen;
    private javax.swing.JLabel PlayerNames;
    private javax.swing.JLabel background;
    private javax.swing.JButton card0;
    private javax.swing.JButton card1;
    private javax.swing.JButton card2;
    private javax.swing.JButton card3;
    private javax.swing.JButton card4;
    private javax.swing.JButton card5;
    private javax.swing.JButton card6;
    private javax.swing.JButton clubs;
    private javax.swing.JLabel continueMessage;
    private javax.swing.JButton deal;
    private javax.swing.JLayeredPane deck;
    private javax.swing.JPanel deckForTPick;
    private javax.swing.JButton diamonds;
    private javax.swing.JTextField enterName;
    private javax.swing.JLabel gameoverLabel;
    private javax.swing.JPanel gamesetup;
    private javax.swing.JButton hearts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lastWinnerPickMessage;
    private javax.swing.JButton overhand;
    private javax.swing.JButton p1;
    private javax.swing.JButton p2;
    private javax.swing.JButton p3;
    private javax.swing.JButton p4;
    private javax.swing.JButton p5;
    private javax.swing.JPanel pickTrump;
    private javax.swing.JButton playAgain;
    private javax.swing.JLabel playername;
    private javax.swing.JButton resetCards;
    private javax.swing.JButton resetNames;
    private javax.swing.JButton riffle;
    private javax.swing.JButton setName;
    private javax.swing.JPanel shufflePanel;
    private javax.swing.JButton spades;
    private javax.swing.JLayeredPane trickArea;
    private javax.swing.JLabel userMessage;
    private javax.swing.JLabel userMessage2;
    private javax.swing.JLabel userMessage3;
    private javax.swing.JLabel winnerLabel;
    // End of variables declaration//GEN-END:variables
}
